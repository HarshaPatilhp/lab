===========================================================================================================================================================================

						i) PROGRAM-01 (water jug)
def water_jug(j1, j2, t):
    s, v = [(0, 0)], set()
    while s:
        a, b = s.pop()
        print(f"{a} {b}")
        if a == t or b == t: return print(f"Solved: {a} {b}")
        if (a, b) in v: continue
        v.add((a, b))
        m = [(j1,b),(a,j2),(0,b),(a,0),
             (a - min(a,j2-b), b + min(a,j2-b)),
             (a + min(b,j1-a), b - min(b,j1-a))]
        s += [x for x in m if x not in v]
    print("No solution")

water_jug(3, 5, 4)


============================================================================================================================================================================

								ii) program-02 (missionaries & cannibels)

from collections import deque

def bfs(s, g):
    V, Q = set(), deque([(s, [s])])
    while Q:
        x, p = Q.popleft()
        if x == g: return p
        if x in V: continue
        V.add(x)
        for m, c in [(1,0),(2,0),(0,1),(0,2),(1,1)]:
            ml, cl, b, mr, cr = x
            d = -1 if b else 1
            n = (ml + d*m, cl + d*c, 1 - b, mr - d*m, cr - d*c)
            if min(n[:5]) >= 0 and (n[0] in [0,3] or n[0] >= n[1]) and (n[3] in [0,3] or n[3] >= n[4]):
                Q.append((n, p + [n]))

def solve():
    R = bfs((3,3,1,0,0), (0,0,0,3,3))
    print(*R if R else ["No solution"], sep="\n")

solve()


==========================================================================================================================================================================

																				PROGRAM-03 (A* & AO*)

from queue import PriorityQueue

def a_star(s, g, G, h):
    Q, V = PriorityQueue(), set()
    Q.put((h[s], 0, s))
    while not Q.empty():
        f, g_c, n = Q.get()
        if n == g: return g_c
        V.add(n)
        for nei, c in G[n]:
            if nei not in V:
                g_n = g_c + c
                Q.put((g_n + h[nei], g_n, nei))

G1 = {'A': [('B', 1), ('C', 2), ('D', 4)], 'B': [], 'C': [], 'D': []}
H1 = {'A': 3, 'B': 1, 'C': 2, 'D': 0}

print("A* Cost:", a_star('A', 'D', G1, H1))


========================================================

b) AO*

def ao_star(n, G, h):
    if not G[n]: return h[n]
    h[n], p = min((sum(h[x] for x in path), path) for path in G[n])
    print(f"{n} -> {p}, Cost: {h[n]}")
    return h[n]

G2 = {'A': [['B', 'C'], ['D']], 'B': [], 'C': [], 'D': []}
H2 = {'A': 999, 'B': 1, 'C': 2, 'D': 4}

print("AO* Cost:", ao_star('A', G2, H2))


===========================================================================================================================================================================

																						PROGRAM - 04 (8 queens)


N = int(input("ENTER THE NUMBER OF QUEENS: "))

board = [[0] * N for _ in range(N)]

def attack(i, j):

    for k in range(0, N):
        if board[i][k] == 1 or board[k][j] == 1:
            return True

    for k in range(0, N):
        for l in range(0, N):
            if (k + l == i + j) or (k - l == i - j):
                if board[k][l] == 1:
                    return True
    return False

def N_queens(n):
    if n == 0:
        return True
    for i in range(0, N):
        for j in range(0, N):
            if (not attack(i, j)) and (board[i][j] != 1):
                board[i][j] = 1
                if N_queens(n - 1) == True:
                    return True
                board[i][j] = 0
    return False

N_queens(N)

for i in board:
    print(" ".join('Q' if x == 1 else '.' for x in i))


===========================================================================================================================================================================

																						PROGRAM - 05 (tsp)

def travel(graph, start):

    unvisited = [i for i in range(len(graph))]
    unvisited.remove(start)
    current = start
    path = [start]
    total_cost=0

    while unvisited:
        cost,closest = min([(graph[current][j], j) for j in unvisited])
        total_cost +=cost
        current = closest
        path.append(current)
        unvisited.remove(current)
    
    total_cost += graph[current][start]
    path.append(start)

    return path,total_cost

graph = [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]]

start = 0

path,total_cost = travel(graph, start)

print("The travelling salesman path is:",path)
print("the cost of the path is:",total_cost)


===========================================================================================================================================================================

																						PROGRAM-06 (forward-backward)

6.
from collections import deque

def forward_chain(start, facts):
    seen, q, out = set(start), deque(start), []
    while q:
        c = q.popleft()
        for a, b in facts:
            if a == c and b not in seen:
                out.append([a, b])
                seen.add(b)
                q.append(b)
    return out

# Example fact base (cause-effect pairs)
facts = [
    ('snake', 'reptile'),
    ('reptile', 'animal'),
    ('animal', 'living'),
    ('cat', 'animal'),
    ('apple', 'fruit')
]

result = forward_chain(['snake'], facts)
print(result)


==========================================================================================================================================================================

																						PROGRAM-07 (FOPL)

import re

def dnf(formula):
    formula = formula.strip().strip("()")
    if re.fullmatch(r'[A-Z]|~[A-Z]', formula):
        return formula

    if 'and' in formula or 'or' in formula:
        parts = re.split(r'\sor\s|\sand\s', formula)
        print(f"parts: {parts}")
        dnf_parts = [dnf(part.strip()) for part in parts]
        print(f"dnf_parts: {dnf_parts}")
        
        if 'or' in formula:
            return " or ".join(dnf_parts)
        elif 'and' in formula:
            return " and ".join(dnf_parts)

def cnf(formula):
    formula = formula.strip().strip("()")
    if re.fullmatch(r'[A-Z]|~[A-Z]', formula):
        return formula
    
    if 'and' in formula or 'or' in formula:
        parts = re.split(r'\sor\s|\sand\s', formula)
        cnf_parts = [cnf(part.strip()) for part in parts]
        if 'and' in formula:
            return " and ".join(cnf_parts)
        elif 'or' in formula:
            return " or ".join(cnf_parts)

# Example usage
formula = "(A and B) or C or D"
cnf_formula = cnf(formula)
dnf_formula = dnf(formula)

print("\nFinal CNF:", cnf_formula)
print("Final DNF:", dnf_formula)


===========================================================================================================================================================================

																						PROGRAM-08

import random 

secret = random.randint(1,10)
print("Welcome to the Number Guessing Game ")
print("I am thinking of a number between 1 and 10")

while True : 
    guess = input("Enter a no : ")
    if not guess.isdigit():
        print("Please Guess a no")
        continue
    guess=int(guess)

    if guess<secret:
        print("Too low. Try again.")
    elif guess>secret:
        print("Too high. Try again.")
    else : 
        print("You guessing it again")
        break

===========================================================================================================================================================================
