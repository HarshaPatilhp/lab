
                                                        Program 1

#include <stdio.h>
#include <stdlib.h>
#define SIZE 20

void push(int ele, int *top, int s[]) { s[++(*top)] = ele; }

void pop(int *top, int s[]) { printf("Popped: %d\n", s[(*top)--]); }

void display(int top, int s[]) {
    for (int i = top; i >= 0; i--) printf("%d ", s[i]);
    printf("\n");
}

int main() {
    int ch, ele, top = -1, s[SIZE];
    while (1) {
        printf("\n1.Push 2.Pop 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                if (top == SIZE - 1) printf("Overflow!\n");
                else {
                    printf("Enter element: ");
                    scanf("%d", &ele);
                    push(ele, &top, s);
                }
                break;
            case 2:
                if (top == -1) printf("Underflow!\n");
                else pop(&top, s);
                break;
            case 3:
                if (top == -1) printf("Stack is empty\n");
                else display(top, s);
                break;
            case 4: exit(0);
            default: printf("Invalid choice!\n");
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        program 2
#include <stdio.h>
#include <string.h>

int F(char sym) {
    switch(sym) {
        case '+': case '-': return 2;
        case '*': case '/': return 4;
        case '^': case '$': return 5;
        case '(': return 0;
        case '#': return -1;
        default: return 8;
    }
}
int G(char sym) {
    switch(sym) {
        case '+': case '-': return 1;
        case '*': case '/': return 3;
        case '^': case '$': return 6;
        case '(': return 9;
        case ')': return 0;
        default: return 7;
    }
}
void infix_postfix(char infix[], char postfix[]) {
    char stack[20] = "#";
    int top = 0, j = 0;

    for (int i = 0; infix[i]; i++) {
        char sym = infix[i];
        while (F(stack[top]) > G(sym))
            postfix[j++] = stack[top--];
        if (F(stack[top]) != G(sym))
            stack[++top] = sym;
        else
            top--; // for ')'
    }
    while (stack[top] != '#')
        postfix[j++] = stack[top--];
    postfix[j] = '\0';
}

int main() {
    char infix[20], postfix[20];
    printf("Enter infix expression: ");
    scanf("%s", infix);
    infix_postfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                            program 3
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

double compute(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case '^': case '$': return pow(a, b);
    }
    return 0;
}

int main() {
    char postfix[20];
    double stack[20], op1, op2;
    int top = -1;

    printf("Enter postfix expression: ");
    scanf("%s", postfix);

    for (int i = 0; postfix[i]; i++) {
        if (isdigit(postfix[i]))
            stack[++top] = postfix[i] - '0';
        else {
            op2 = stack[top--];
            op1 = stack[top--];
            stack[++top] = compute(op1, op2, postfix[i]);
        }
    }

    printf("Result: %.4f\n", stack[top]);
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                            Program 4
#include <stdio.h>
#define MAX 5

int cq[MAX], front = -1, rear = -1;

int isFull() { return (front == (rear + 1) % MAX); }
int isEmpty() { return (front == -1); }

void insert(int val) {
    if (isFull()) printf("Overflow\n");
    else {
        if (isEmpty()) front = 0;
        rear = (rear + 1) % MAX;
        cq[rear] = val;
    }
}

void delete() {
    if (isEmpty()) printf("Underflow\n");
    else {
        printf("Deleted: %d\n", cq[front]);
        if (front == rear) front = rear = -1;
        else front = (front + 1) % MAX;
    }
}

void display() {
    if (isEmpty()) printf("Queue is Empty\n");
    else {
        printf("Queue: ");
        for (int i = front; i != rear; i = (i + 1) % MAX)
            printf("%d ", cq[i]);
        printf("%d\n", cq[rear]);
    }
}

int main() {
    int ch, val;
    while (1) {
        printf("1.Insert 2.Delete 3.Display 4.Exit\n");
        scanf("%d", &ch);
        switch (ch) {
            case 1: printf("Enter: "); scanf("%d", &val); insert(val); break;
            case 2: delete(); break;
            case 3: display(); break;
            case 4: return 0;
            default: printf("Invalid\n");
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                program 5
#include <stdio.h>
#define MAX 5

int dq[MAX], front = -1, rear = -1;

int isFull()  { return (front == (rear + 1) % MAX); }
int isEmpty() { return (front == -1); }

void insertFront(int val) {
    if (isFull()) printf("Overflow\n");
    else {
        if (isEmpty()) front = rear = 0;
        else front = (front - 1 + MAX) % MAX;
        dq[front] = val;
    }
}

void insertRear(int val) {
    if (isFull()) printf("Overflow\n");
    else {
        if (isEmpty()) front = rear = 0;
        else rear = (rear + 1) % MAX;
        dq[rear] = val;
    }
}

void deleteFront() {
    if (isEmpty()) printf("Underflow\n");
    else {
        printf("Deleted: %d\n", dq[front]);
        if (front == rear) front = rear = -1;
        else front = (front + 1) % MAX;
    }
}

void deleteRear() {
    if (isEmpty()) printf("Underflow\n");
    else {
        printf("Deleted: %d\n", dq[rear]);
        if (front == rear) front = rear = -1;
        else rear = (rear - 1 + MAX) % MAX;
    }
}

void display() {
    if (isEmpty()) printf("Queue is Empty\n");
    else {
        printf("Deque: ");
        for (int i = front; i != rear; i = (i + 1) % MAX)
            printf("%d ", dq[i]);
        printf("%d\n", dq[rear]);
    }
}

int main() {
    int ch, val;
    while (1) {
        printf("1.IF 2.IR 3.DF 4.DR 5.Display 6.Exit\n");
        scanf("%d", &ch);
        switch (ch) {
            case 1: printf("Enter: "); scanf("%d", &val); insertFront(val); break;
            case 2: printf("Enter: "); scanf("%d", &val); insertRear(val); break;
            case 3: deleteFront(); break;
            case 4: deleteRear(); break;
            case 5: display(); break;
            case 6: return 0;
            default: printf("Invalid\n");
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


