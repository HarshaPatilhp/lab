																						PROGRAM-01

SHOW DATABASES;
CREATE DATABASE ai403_test1;
USE ai403_test1;

CREATE TABLE Employee (
    EMPNO INT,
    ENAME VARCHAR(50),
    JOB VARCHAR(50),
    MANAGER_NO INT,
    SAL DECIMAL(10,2),
    COMMISION DECIMAL(10,2)
);

desc Employee;

CREATE USER Employee_MS IDENTIFIED BY '24megha!';
GRANT ALL PRIVILEGES ON Employee TO employee_MS; 


START TRANSACTION;

INSERT INTO Employee(EMPNO,ENAME,JOB,MANAGER_NO,SAL,COMMISION) VALUES
(1,'John Doe','Manager',NULL,5000.00,NULL),
(2,'Jane Smith','Developer',1,4000.00,500.00),
(3,'Michael Johnson','Analyst',1,4500.00,NULL);

SELECT * FROM Employee;

ROLLBACK;

ALTER TABLE Employee
ADD CONSTRAINT PK_Employee_EMPNO PRIMARY KEY (EMPNO);

ALTER TABLE Employee MODIFY EMPNO INT NOT NULL;

ALTER TABLE Employee MODIFY ENAME VARCHAR(50) NOT NULL;

ALTER TABLE Employee MODIFY JOB VARCHAR(50) NOT NULL;

ALTER TABLE Employee MODIFY SAL DECIMAL(10,2) NOT NULL;

desc Employee;

INSERT INTO Employee(EMPNO,ENAME,JOB,SAL) VALUES
(4,'Alice Johnson',NULL,6000.00);


===========================================================================================================================================================================

																						PROGRAM-02
CREATE DATABASE lab;
use lab;
CREATE TABLE EMPLOYEE1 (
	EMPNO INT PRIMARY KEY,
    ENAME VARCHAR(50),
    JOB VARCHAR(50),
    MGR INT,
    SAL DECIMAL(10,2)
);

desc EMPLOYEE1;

ALTER TABLE EMPLOYEE1
ADD COMMISSION DECIMAL(10,2);

desc EMPLOYEE1;

INSERT INTO EMPLOYEE1(EMPNO,ENAME,JOB,MGR,SAL) VALUES 
(101,'John','Manager',100,5000.00),
(102,'Alice','Developer',101,4000.00),
(103,'Bob','Analyst',101,4500.00),
(104,'Emma','Designer',101,4800.00),
(105,'Michael','Salesperson',101,3500.00);

 

UPDATE EMPLOYEE1
SET JOB = 'Sales Manager'
WHERE EMPNO = 105;

ALTER TABLE EMPLOYEE1
RENAME COLUMN MGR TO MANAGER_NO;

or ( ALTER TABLE EMPLOYEE1
CHANGE MGR MANAGER_NO INT; )


DELETE FROM EMPLOYEE1
WHERE EMPNO = 105;

===========================================================================================================================================================================

																						PROGRAM-03

create database ai403_test3;
use ai403_test3;

CREATE TABLE employee3(e_id INT PRIMARY KEY,
	e_name VARCHAR(50),
    age INT,
    salary DECIMAL(10,2));
    
DESC employee3;
     
INSERT INTO employee3(e_id,e_name,age,salary) VALUES (1,'john',30,5000.00),(2,'alice',35,6000.00),(3,'bob',28,4500.00),(4,'michel',40,7000.00),(5,'emma',32,5500.00);
   
SELECT * FROM employee3;
SELECT COUNT(e_name) FROM employee3;
    
SELECT MIN(age) FROM employee3;
    
SELECT MAX(age) as Maximum_age FROM employee3;
    
SELECT salary FROM employee3 ORDER BY salary DESC;
or ( SELECT salary FROM employee3 ORDER BY salary ASC; )
    
SELECT salary,COUNT(*) AS employee_count FROM Employee3 GROUP BY salary;

INSERT INTO employee3(e_id,e_name,age,salary) VALUES (7,'darshan',19,6000.00);



===========================================================================================================================================================================
				
																						PROGRAM-04
create database ai403_test4;

use ai403_test4;

create table customer(
id int primary key,
name varchar(100),
age int,
address varchar(255),
salary decimal(10,2)
);

desc customer;

create table salary_changes_log(
change_id int auto_increment primary key,
change_type varchar(50),
old_salary decimal(10,2),
new_salary decimal(10,2),
change_timestamp timestamp default current_timestamp
);

desc salary_changes_log;

DELIMITER //
create trigger tr_customer_insert
after insert on customer for each row
begin
insert into salary_changes_log (change_type,old_salary,new_salary) values ('INSERT',NULL,new.salary);
end //
delimiter ;

DELIMITER //
create trigger tr_customer_update
after update on customer for each row
begin
insert into salary_changes_log (change_type,old_salary,new_salary) values ('UPDATE',old.salary,new.salary);
end //
DELIMITER ;

DELIMITER //
create trigger tr_customer_delete
after delete on customer for each row
begin
insert into salary_changes_log (change_type,old_salary,new_salary) values ('DELETE',old.salary,NULL);
end //
DELIMITER ;

insert into customer (id,name,age,address,salary) values (2,'bob',25,'123 boston',50000.00);

update customer set salary = 55000.00 where id = 2;

delete from customer where id = 2;

select * from salary_changes_log;

select * from customer;
===========================================================================================================================================================================


																						PROGRAM-05

create database ai403_test5;

use ai403_test5;

create table employee (
E_id int primary key,
E_name varchar(100),
Age int,
Salary decimal(10,2)
);

insert into employee (E_id,E_name,age,salary)values
(1,'Alice',30,60000.00),
(2,'Bob',25,50000.00),
(3,'Charlie',35,70000.00),
(4,'David',28,55000.00);

select * from employee;

DELIMITER //

create procedure ExtractEmployeeData()
begin
declare V_E_id int;
declare V_E_name varchar(100);
declare V_Age int;
declare V_Salary decimal(10,2);
declare done int default 0;

DECLARE emp_cursor cursor for select E_id, E_name,Age,Salary from employee;

declare continue handler for not found set done =1;

open emp_cursor;

read_loop : LOOP
fetch emp_cursor into V_E_id,V_E_Name,V_Age,V_Salary;

if done then
leave read_loop;
end if;

select V_E_id AS E_id, V_E_name AS E_name, V_Age as Age, V_Salary as Salary;

end loop read_loop;
close emp_cursor;

end //

call ExtractEmployeeData() //


===========================================================================================================================================================================

																						PROGRAM-06 ( OE )

create database library; 
use library; 

CREATE TABLE PUBLISHER 
(NAME VARCHAR(20) PRIMARY KEY, 
ADDRESS VARCHAR(50) NOT NULL, 
PHONE VARCHAR(10));
 
DESC PUBLISHER; 

CREATE TABLE BOOK 
(BOOK_ID INT PRIMARY KEY, 
TITLE VARCHAR(20) NOT NULL, 
PUBLISHER_NAME VARCHAR(20) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE, 
PUB_YEAR VARCHAR(5)); 

DESC BOOK; 

CREATE TABLE BOOK_AUTHOR 
(BOOK_ID INT REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE, 
AUTHOR_NAME VARCHAR(20) NOT NULL, 
PRIMARY KEY(BOOK_ID)); 

DESC BOOK_AUTHOR; 

CREATE TABLE LIBRARY_BRANCH 
(BRANCH_ID INT PRIMARY KEY, 
BRANCH_NAME VARCHAR(20) NOT NULL, 
ADDRESS VARCHAR(50) ); 

DESC LIBRARY_BRANCH; 

CREATE TABLE BOOK_LENDING 
(BOOK_ID INT REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE, 
BRANCH_ID INT REFERENCES LIBRARY_BRANCH(BRANCH_ID) ON DELETE CASCADE, 
CARD_NO INT NOT NULL, 
DATE_OUT DATE NOT NULL, 
DUE_DATE DATE, 
PRIMARY KEY(BOOK_ID,BRANCH_ID)); 

DESC BOOK_LENDING; 

CREATE TABLE BOOK_COPIES 
(BOOK_ID INT REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE, 
BRANCH_ID INT REFERENCES LIBRARY_BRANCH(BRANCH_ID), 
NO_OF_COPIES INT, 
PRIMARY KEY(BOOK_ID,BRANCH_ID) ); 

DESC BOOK_COPIES; 

INSERT INTO PUBLISHER VALUES("PEARSON","NEW DELHI", 9996621456); 
INSERT INTO PUBLISHER VALUES("OXFORD","MUMBAI",9966884422); 
INSERT INTO PUBLISHER VALUES("MC GRAW HILL","CHENNAI", 8866333444); 
INSERT INTO PUBLISHER VALUES("MACMILLAN","MANGALORE",9898989898); 
INSERT INTO PUBLISHER VALUES("CAMBRIDGE","BANGALORE",9876549876); 
SELECT * FROM PUBLISHER; 

INSERT INTO BOOK VALUES(201,'DBMS','PEARSON','2015'); 
INSERT INTO BOOK VALUES(202,'PYTHON PROGRAMMING','OXFORD','2020'); 
INSERT INTO BOOK VALUES(203,'AI','MC GRAW HILL','2018'); 
INSERT INTO BOOK VALUES(204,'AUTOMATA THEORY','MACMILLAN','2014'); 
INSERT INTO BOOK VALUES(205,'ENTREPRENEURSHIP','CAMBRIDGE','2017'); 
SELECT * FROM BOOK; 

INSERT INTO BOOK_AUTHOR VALUES(201,'NAVATHE'); 
INSERT INTO BOOK_AUTHOR VALUES(202,'AL SWEIGART'); 
INSERT INTO BOOK_AUTHOR VALUES(203,'SAROJ KAUSHIK'); 
INSERT INTO BOOK_AUTHOR VALUES(204,'ELAINE RICH'); 
INSERT INTO BOOK_AUTHOR VALUES(205,'TRIPATHI'); 
SELECT * FROM BOOK_AUTHOR; 

INSERT INTO LIBRARY_BRANCH VALUES(101,'MANIPAL','UDUPI'); 
INSERT INTO LIBRARY_BRANCH VALUES(102,'MALLESHWARAM','BANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES(103,'NEW ROAD','DELHI'); 
INSERT INTO LIBRARY_BRANCH VALUES(104,'LADYHILL','MANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES(105,'DOLLARS COLONY','MYSORE'); 
SELECT * FROM LIBRARY_BRANCH; 

INSERT INTO BOOK_LENDING VALUES(201,101,401,'2017-01-02','2017-02-02'); 
INSERT INTO BOOK_LENDING VALUES(202,101,401,'2017-01-07','2017-02-07'); 
INSERT INTO BOOK_LENDING VALUES(203,101,401,'2017-03-10','2017-04-10'); 
INSERT INTO BOOK_LENDING VALUES(204,101,401,'2017-05-20','2017-06-20'); 
INSERT INTO BOOK_LENDING VALUES(205,102,405,'2017-06-15','2017-07-15'); 
SELECT * FROM BOOK_LENDING; 

INSERT INTO BOOK_COPIES VALUES(201,101,10); 
INSERT INTO BOOK_COPIES VALUES(202,101,35); 
INSERT INTO BOOK_COPIES VALUES(203,101,25); 
INSERT INTO BOOK_COPIES VALUES(203,102,15); 
INSERT INTO BOOK_COPIES VALUES(202,102,30); 
INSERT INTO BOOK_COPIES VALUES(201,105,45); 
SELECT * FROM BOOK_COPIES; 

/*1. Retrieve details of all books in the library â€“ id, title, name of 
publisher, authors, number of copies in each branch, etc.*/ 

SELECT B.BOOK_ID, B.TITLE, B.PUBLISHER_NAME, 
A.AUTHOR_NAME,C.NO_OF_COPIES, L.BRANCH_ID 
FROM BOOK B, BOOK_AUTHOR A, BOOK_COPIES C, LIBRARY_BRANCH L 
WHERE B.BOOK_ID=A.BOOK_ID AND B.BOOK_ID=C.BOOK_ID AND 
L.BRANCH_ID=C.BRANCH_ID ; 

/*2. Get the particulars of borrowers who have borrowed more than 3  
books, but from Jan 2017 to Jun 2017.*/ 

SELECT BL.CARD_NO FROM BOOK_LENDING BL WHERE DATE_OUT BETWEEN 
'2017-01-01' AND '2017-07-01'  
GROUP BY BL.CARD_NO HAVING COUNT(CARD_NO)>3; 

/*3. Delete a book in the BOOK table. Update the contents of other 
tables to reflect this data manipulation operation. */ 

DELETE FROM BOOK WHERE BOOK_ID=203; 
SELECT * FROM BOOK; 

/*4. Create a view of all books and its number of copies that are 
currently available in the Library.*/ 

CREATE VIEW BK_COPIES_VIEW AS SELECT B.BOOK_ID, B.TITLE,C.NO_OF_COPIES 
FROM BOOK B,BOOK_COPIES C,LIBRARY_BRANCH L WHERE B.BOOK_ID=C.BOOK_ID 
AND C.BRANCH_ID=L.BRANCH_ID; 

SELECT * FROM BK_COPIES_VIEW;
